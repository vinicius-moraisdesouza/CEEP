from django.core.management.base import BaseCommand
from core.models import Materia

class Command(BaseCommand):
    help = "Popula o banco de dados com as mat√©rias b√°sicas e t√©cnicas do CEEP"

    def handle(self, *args, **options):
        self.stdout.write(self.style.NOTICE("üöÄ Iniciando o seed de mat√©rias..."))

        # Mat√©rias da base comum
        materias_base = [
            "Portugu√™s", "Matem√°tica", "Qu√≠mica", "Biologia", 
            "F√≠sica", "Geografia", "Hist√≥ria",
        ]

        # Mat√©rias da base t√©cnica (usando os nomes dos cursos)
        materias_tecnicas = [
            "ADMINISTRA√á√ÉO", "AN√ÅLISES CL√çNICAS", "BIOTECNOLOGIA", 
            "FINAN√áAS", "LOG√çSTICA", "SEGURAN√áA DO TRABALHO", 
            "SERVI√áOS JUR√çDICOS", "EDIFICA√á√ïES", "ENFERMAGEM", "PANIFICA√á√ÉO",
        ]
        
        # Juntamos as duas listas
        todas_as_materias = materias_base + materias_tecnicas
        
        materias_criadas = 0
        materias_existentes = 0

        for nome_materia in todas_as_materias:
            # Usamos get_or_create para evitar duplicatas.
            # Ele procura uma mat√©ria com aquele nome. Se n√£o achar, cria uma nova.
            obj, criado = Materia.objects.get_or_create(nome=nome_materia)

            if criado:
                materias_criadas += 1
                self.stdout.write(f"   - Mat√©ria '{obj.nome}' criada.")
            else:
                materias_existentes += 1
        
        self.stdout.write(self.style.SUCCESS(f"\n‚úÖ Seed finalizado!"))
        self.stdout.write(f"   - Novas mat√©rias criadas: {materias_criadas}")
        self.stdout.write(f"   - Mat√©rias que j√° existiam: {materias_existentes}")